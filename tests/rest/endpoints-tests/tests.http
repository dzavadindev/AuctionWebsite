### Retrieve a token of an admin client
POST {{protocol}}{{host}}:{{port}}/token
Content-Type: application/json

{
  "username": "admin",
  "password": "12345"
}

> {%
    client.global.set("adminToken", response.body.token);

    client.test("Retrieving a token for admin client", () => {
        client.assert(response.status === 201, "Server responded with a non-201 status code")
        client.assert(response.body.token, "No token has been returned")
    })
%}

##############################
############################## GOOD WEATHER ADMIN
##############################

### Create a new product
POST {{protocol}}{{host}}:{{port}}/products
Content-Type: application/json
Authorization: Bearer {{adminToken}}

{
  "image": "/image",
  "name": "New Painting",
  "author": "Joe Doe",
  "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
  "price": "100",
  "country": "Netherlands",
  "year": "2023",
  "endDate": "29-10-2024"
}

> {%
    client.global.set("productId", response.body.id);

    client.test("Creation of a product", () => {
        client.assert(response.status === 201, "Server responded with a non-201 status code")
    })
%}

### Fetch a specific product by ID (No auth required)
GET {{protocol}}{{host}}:{{port}}/products/{{productId}}

> {%
    client.test("Getting specific product", () => {
        client.assert(response.status === 200, "Server responded with a non-200 status code");
    })
%}

### Add a bid to a product
POST {{protocol}}{{host}}:{{port}}/products/{{productId}}/bids
Content-Type: application/json
Authorization: Bearer {{adminToken}}

{
  "bid": 200
}

> {%
    client.test("Placing a bid to a product", () => {
        client.assert(response.status === 201, "Server responded with a non-201 status code");
    })
%}

### Fetch bids for a specific product (No auth required)
GET {{protocol}}{{host}}:{{port}}/products/{{productId}}/bids

> {%
    client.test("Getting all bids of a product", () => {
        client.assert(response.status === 200, "Server responded with a non-200 status code");
    })
%}

### Update a specific product
PUT {{protocol}}{{host}}:{{port}}/products/{{productId}}
Content-Type: application/json
Authorization: Bearer {{adminToken}}

{
  "image": "/updated-image",
  "name": "Updated Painting",
  "author": "Joe Doe",
  "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
  "price": 100,
  "country": "Denmark",
  "year": 2020,
  "endDate": "29-10-2024"
}

> {%
    client.test("Updating info of a product", () => {
        client.assert(response.status === 200, "Server responded with a non-200 status code");
    })
%}

### Fetch a specific user by username
GET {{protocol}}{{host}}:{{port}}/users/admin
Authorization: Bearer {{adminToken}}

> {%
    client.test("Updating info of a product", () => {
        client.assert(response.status === 200, "Server responded with a non-200 status code");
    })
%}

### Delete a specific user
DELETE {{protocol}}{{host}}:{{port}}/users/{{userId}}
Authorization: Bearer {{adminToken}}

> {%
    client.test("Updating info of a product", () => {
        client.assert(response.status === 200, "Server responded with a non-200 status code");
    })
%}

### Update a specific user
PUT {{protocol}}{{host}}:{{port}}/users/{{userId}}
Content-Type: application/json
Authorization: `Bearer {{token}}`

{
  "data": {
    "username": "johnDUpdated",
    "password": "newSecurePass"
  }
}

### Fetch all users
GET {{protocol}}{{host}}:{{port}}/users
Authorization: `Bearer {{token}}`

##############################
############################## BAD WEATHER ADMIN
##############################

### Creation of a user client / Retrieve a token of an user client
POST {{protocol}}{{host}}:{{port}}/users
Content-Type: application/json

{
  "username": "bobby",
  "email": "bobby@gmail.com",
  "password": "54321"
}

> {%
    client.global.set("userToken", response.body.token);

    client.test("Retrieving a token for user client", () => {
        client.assert(response.status === 201, "Server responded with a non-201 status code")
        client.assert(response.body.token, "No token has been returned")
    })
%}

##############################
############################## GOOD WEATHER USER
##############################

##############################
############################## BAD WEATHER USER
##############################

###############
############### THE ADMIN DELETES THE CREATED PRODUCT AFTER ALL TESTS HAVE BEEN PROCESSED, AS WELL AS TESTING PRODUCT|USER DELETION
###############